<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Chat</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="/socket.io/socket.io.js"></script>
  <script>
    const senderId = "<%= userId %>";
    const receiverId = "<%= receiver ? receiver._id : null %>";
    const initialMessages = <%- JSON.stringify(messages || []) %>;
  </script>
</head>
<body class="h-screen bg-gray-100">

  <div class="flex flex-col sm:flex-row h-full">
    <!-- User List -->
    <div class="w-full sm:w-1/3 bg-white border-r overflow-y-auto">
      <div class="p-4 font-bold text-lg bg-indigo-600 text-white">Messages</div>
      <ul id="userList">
        <% allUsers.forEach(user => { %>
          <li data-id="<%= user._id %>" class="cursor-pointer px-4 py-3 hover:bg-gray-100 border-b">
            <div class="font-medium text-gray-800"><%= user.name %></div>
          </li>
        <% }) %>
      </ul>
    </div>

    <!-- Chat Section -->
    <div class="flex-1 flex flex-col bg-white">
      <div id="chatHeader" class="bg-indigo-600 text-white px-4 py-3 text-lg font-semibold hidden sm:block">Chat</div>

      <div id="chat-box" class="flex-1 p-4 overflow-y-auto space-y-2 hidden bg-gray-50">
        <!-- Messages -->
      </div>

      <div id="chatInputSection" class="border-t px-4 py-3 flex items-center gap-2 hidden">
        <input
          type="text"
          id="msgInput"
          placeholder="Type a message..."
          class="flex-1 px-4 py-2 border rounded-full focus:outline-none focus:ring-2 focus:ring-indigo-400"
        />
        <button
          id="sendBtn"
          class="bg-indigo-600 text-white px-5 py-2 rounded-full hover:bg-indigo-700"
        >
          Send
        </button>
      </div>
    </div>
  </div>

  <script>
    const socket = io();
    let currentReceiverId = null;
    const chatBox = document.getElementById('chat-box');
    const chatHeader = document.getElementById('chatHeader');
    const chatInputSection = document.getElementById('chatInputSection');
    const msgInput = document.getElementById('msgInput');
    const sendBtn = document.getElementById('sendBtn');

    socket.emit('register', senderId);

    const renderMessage = (msg, isSender) => {
      const bubble = document.createElement('div');
      bubble.className = isSender ? 'text-right' : 'text-left';
      bubble.innerHTML = `
        <div class="${isSender ? 'bg-indigo-600 text-white' : 'bg-gray-200 text-gray-800'} inline-block px-4 py-2 rounded-2xl text-sm max-w-xs sm:max-w-md break-words">
          ${msg.message}
        </div>
      `;
      chatBox.appendChild(bubble);
    };

    if (receiverId && initialMessages.length) {
      currentReceiverId = receiverId;
      chatHeader.textContent = "Chat with <%= receiver.name %>";
      chatHeader.classList.remove("hidden");
      chatBox.innerHTML = '';
      chatBox.classList.remove("hidden");
      chatInputSection.classList.remove("hidden");

      initialMessages.forEach(msg => {
        renderMessage(msg, msg.senderId === senderId);
      });
      chatBox.scrollTop = chatBox.scrollHeight;
    }

    document.querySelectorAll('#userList li').forEach(li => {
      li.addEventListener('click', async () => {
        const receiverId = li.getAttribute('data-id');
        currentReceiverId = receiverId;

        chatHeader.textContent = 'Chat with ' + li.innerText;
        chatHeader.classList.remove('hidden');
        chatBox.innerHTML = '';
        chatBox.classList.remove('hidden');
        chatInputSection.classList.remove('hidden');

        const res = await fetch(`/api/messages/${receiverId}`);
        const data = await res.json();

        data.messages.forEach(msg => {
          renderMessage(msg, msg.senderId === senderId);
        });
        chatBox.scrollTop = chatBox.scrollHeight;
      });
    });

    const sendMessage = () => {
      const message = msgInput.value.trim();
      if (message && currentReceiverId) {
        socket.emit('private message', {
          senderId,
          receiverId: currentReceiverId,
          message
        });
        msgInput.value = '';
      }
    };

    sendBtn.addEventListener('click', sendMessage);

    msgInput.addEventListener('keydown', e => {
      if (e.key === 'Enter') {
        sendMessage();
      }
    });

    socket.on('private message', (data) => {
      if (data.senderId === currentReceiverId || data.senderId === senderId) {
        renderMessage(data, data.senderId === senderId);
        chatBox.scrollTop = chatBox.scrollHeight;
      }
    });
  </script>
</body>
</html>
